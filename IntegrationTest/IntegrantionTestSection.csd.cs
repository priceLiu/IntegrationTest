//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrationTest
{
    
    
    /// <summary>
    /// The TestSection Configuration Section.
    /// </summary>
    public partial class TestSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the TestSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TestSectionSectionName = "testSection";
        
        /// <summary>
        /// Gets the TestSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::IntegrationTest.TestSection Instance
        {
            get
            {
                return ((global::IntegrationTest.TestSection)(global::System.Configuration.ConfigurationManager.GetSection(global::IntegrationTest.TestSection.TestSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::IntegrationTest.TestSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Cases Property
        /// <summary>
        /// The XML name of the <see cref="Cases"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CasesPropertyName = "cases";
        
        /// <summary>
        /// Gets or sets the Cases.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Cases.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestSection.CasesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::IntegrationTest.TestCaseConfCollection Cases
        {
            get
            {
                return ((global::IntegrationTest.TestCaseConfCollection)(base[global::IntegrationTest.TestSection.CasesPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestSection.CasesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace IntegrationTest
{
    
    
    /// <summary>
    /// The TestCaseConf Configuration Element.
    /// </summary>
    public partial class TestCaseConf : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Sleep Property
        /// <summary>
        /// The XML name of the <see cref="Sleep"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SleepPropertyName = "sleep";
        
        /// <summary>
        /// Gets or sets the Sleep.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Sleep.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCaseConf.SleepPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=1000)]
        public virtual int Sleep
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCaseConf.SleepPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCaseConf.SleepPropertyName] = value;
            }
        }
        #endregion
        
        #region RunTime Property
        /// <summary>
        /// The XML name of the <see cref="RunTime"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RunTimePropertyName = "runTime";
        
        /// <summary>
        /// Gets or sets the RunTime.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RunTime.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCaseConf.RunTimePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=10)]
        public virtual int RunTime
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCaseConf.RunTimePropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCaseConf.RunTimePropertyName] = value;
            }
        }
        #endregion
        
        #region Count Property
        /// <summary>
        /// The XML name of the <see cref="Count"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CountPropertyName = "count";
        
        /// <summary>
        /// Gets or sets the Count.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Count.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCaseConf.CountPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=10000)]
        public virtual int Count
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCaseConf.CountPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCaseConf.CountPropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCaseConf.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::IntegrationTest.TestCaseConf.TypePropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCaseConf.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region MaxThread Property
        /// <summary>
        /// The XML name of the <see cref="MaxThread"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MaxThreadPropertyName = "maxThread";
        
        /// <summary>
        /// Gets or sets the MaxThread.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MaxThread.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCaseConf.MaxThreadPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=1)]
        public virtual int MaxThread
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCaseConf.MaxThreadPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCaseConf.MaxThreadPropertyName] = value;
            }
        }
        #endregion
        
        #region Units Property
        /// <summary>
        /// The XML name of the <see cref="Units"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UnitsPropertyName = "units";
        
        /// <summary>
        /// Gets or sets the Units.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Units.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCaseConf.UnitsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=10)]
        public virtual int Units
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCaseConf.UnitsPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCaseConf.UnitsPropertyName] = value;
            }
        }
        #endregion
        
        #region Counters Property
        /// <summary>
        /// The XML name of the <see cref="Counters"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CountersPropertyName = "counters";
        
        /// <summary>
        /// Gets or sets the Counters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Counters.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCaseConf.CountersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::IntegrationTest.TestCounterConfCollection Counters
        {
            get
            {
                return ((global::IntegrationTest.TestCounterConfCollection)(base[global::IntegrationTest.TestCaseConf.CountersPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCaseConf.CountersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace IntegrationTest
{
    
    
    /// <summary>
    /// A collection of TestCaseConf instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::IntegrationTest.TestCaseConf), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class TestCaseConfCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::IntegrationTest.TestCaseConf"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TestCaseConfPropertyName = "testCaseConf";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::IntegrationTest.TestCaseConfCollection.TestCaseConfPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::IntegrationTest.TestCaseConfCollection.TestCaseConfPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::IntegrationTest.TestCaseConf)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::IntegrationTest.TestCaseConf"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::IntegrationTest.TestCaseConf"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::IntegrationTest.TestCaseConf();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCaseConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::IntegrationTest.TestCaseConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCaseConf this[int index]
        {
            get
            {
                return ((global::IntegrationTest.TestCaseConf)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCaseConf"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::IntegrationTest.TestCaseConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCaseConf this[object type]
        {
            get
            {
                return ((global::IntegrationTest.TestCaseConf)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::IntegrationTest.TestCaseConf"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testCaseConf">The <see cref="global::IntegrationTest.TestCaseConf"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::IntegrationTest.TestCaseConf testCaseConf)
        {
            base.BaseAdd(testCaseConf);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::IntegrationTest.TestCaseConf"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testCaseConf">The <see cref="global::IntegrationTest.TestCaseConf"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::IntegrationTest.TestCaseConf testCaseConf)
        {
            base.BaseRemove(this.GetElementKey(testCaseConf));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCaseConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::IntegrationTest.TestCaseConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCaseConf GetItemAt(int index)
        {
            return ((global::IntegrationTest.TestCaseConf)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCaseConf"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::IntegrationTest.TestCaseConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCaseConf GetItemByKey(string type)
        {
            return ((global::IntegrationTest.TestCaseConf)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace IntegrationTest
{
    
    
    /// <summary>
    /// The TestCounterConf Configuration Element.
    /// </summary>
    public partial class TestCounterConf : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCounterConf.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::IntegrationTest.TestCounterConf.NamePropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCounterConf.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region From Property
        /// <summary>
        /// The XML name of the <see cref="From"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FromPropertyName = "from";
        
        /// <summary>
        /// Gets or sets the From.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The From.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCounterConf.FromPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=0)]
        public virtual int From
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCounterConf.FromPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCounterConf.FromPropertyName] = value;
            }
        }
        #endregion
        
        #region To Property
        /// <summary>
        /// The XML name of the <see cref="To"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ToPropertyName = "to";
        
        /// <summary>
        /// Gets or sets the To.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The To.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCounterConf.ToPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=1000)]
        public virtual int To
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCounterConf.ToPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCounterConf.ToPropertyName] = value;
            }
        }
        #endregion
        
        #region Count Property
        /// <summary>
        /// The XML name of the <see cref="Count"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CountPropertyName = "count";
        
        /// <summary>
        /// Gets or sets the Count.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Count.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::IntegrationTest.TestCounterConf.CountPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=0)]
        public virtual int Count
        {
            get
            {
                return ((int)(base[global::IntegrationTest.TestCounterConf.CountPropertyName]));
            }
            set
            {
                base[global::IntegrationTest.TestCounterConf.CountPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace IntegrationTest
{
    
    
    /// <summary>
    /// A collection of TestCounterConf instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::IntegrationTest.TestCounterConf), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class TestCounterConfCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::IntegrationTest.TestCounterConf"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TestCounterConfPropertyName = "testCounterConf";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::IntegrationTest.TestCounterConfCollection.TestCounterConfPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::IntegrationTest.TestCounterConfCollection.TestCounterConfPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::IntegrationTest.TestCounterConf)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::IntegrationTest.TestCounterConf"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::IntegrationTest.TestCounterConf"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::IntegrationTest.TestCounterConf();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCounterConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::IntegrationTest.TestCounterConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCounterConf this[int index]
        {
            get
            {
                return ((global::IntegrationTest.TestCounterConf)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCounterConf"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::IntegrationTest.TestCounterConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCounterConf this[object name]
        {
            get
            {
                return ((global::IntegrationTest.TestCounterConf)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::IntegrationTest.TestCounterConf"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testCounterConf">The <see cref="global::IntegrationTest.TestCounterConf"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::IntegrationTest.TestCounterConf testCounterConf)
        {
            base.BaseAdd(testCounterConf);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::IntegrationTest.TestCounterConf"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testCounterConf">The <see cref="global::IntegrationTest.TestCounterConf"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::IntegrationTest.TestCounterConf testCounterConf)
        {
            base.BaseRemove(this.GetElementKey(testCounterConf));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCounterConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::IntegrationTest.TestCounterConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCounterConf GetItemAt(int index)
        {
            return ((global::IntegrationTest.TestCounterConf)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::IntegrationTest.TestCounterConf"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::IntegrationTest.TestCounterConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::IntegrationTest.TestCounterConf GetItemByKey(string name)
        {
            return ((global::IntegrationTest.TestCounterConf)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
